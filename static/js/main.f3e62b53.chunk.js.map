{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["Movie","title","poster","genres","synopsis","className","MoviePoster","alt","map","genre","index","MovieGenre","key","text","maxLine","ellipsis","tringRight","basedOn","src","prototype","PropTypes","string","isRequired","array","App","state","_rendermovies","movies","movie","title_english","medium_cover_image","id","_getMovies","a","async","_callApi","setState","fetch","then","response","json","data","catch","err","console","log","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+VAKA,SAASA,EAAT,GAAkD,IAAlCC,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,SACrC,OACM,yBAAKC,UAAU,SACf,yBAAKA,UAAU,iBACb,kBAACC,EAAD,CAAaJ,OAAQA,EAAQK,IAAKN,KAEpC,yBAAKI,UAAU,iBACb,4BAAKJ,GACL,yBAAKI,UAAU,iBACVF,EAAOK,KAAI,SAACC,EAAOC,GAAR,OAAkB,kBAACC,EAAD,CAAYF,MAAOA,EAAOG,IAAKF,QAEjE,uBAAGL,UAAU,mBACX,kBAAC,IAAD,CACEQ,KAAMT,EACNU,QAAQ,IACRC,SAAU,MACVC,YAAU,EACVC,QAAQ,eAStB,SAASX,EAAT,GAAoC,IAAdJ,EAAa,EAAbA,OAAQK,EAAK,EAALA,IAC5B,OACE,yBAAKW,IAAOhB,EAAQK,IAAKA,EAAKN,MAAOM,EAAKF,UAAU,kBAKxD,SAASM,EAAT,GAA6B,IAARF,EAAO,EAAPA,MACnB,OACE,0BAAMJ,UAAU,iBAAiBI,GAKrCT,EAAMmB,UAAY,CAChBlB,MAAOmB,IAAUC,OAAOC,WACxBpB,OAAQkB,IAAUC,OAAOC,WACzBnB,OAAQiB,IAAUG,MAAMD,WACxBlB,SAAUgB,IAAUC,OAAOC,YAG7BhB,EAAYa,UAAY,CACtBjB,OAAQkB,IAAUC,OAAOC,WACzBf,IAAKa,IAAUC,OAAOC,YAGxBX,EAAWQ,UAAY,CACrBV,MAAOW,IAAUC,OAAOC,YAGXtB,QCIAwB,E,2MAtDbC,MAAQ,G,EAMRC,cAAgB,WAoBd,OAnBe,EAAKD,MAAME,OAAOnB,KAAI,SAACoB,GACpC,OAAO,kBAAC,EAAD,CACP3B,MACE2B,EAAMC,cAER3B,OACE0B,EAAME,mBAERlB,IACEgB,EAAMG,GAER5B,OACEyB,EAAMzB,OAERC,SACEwB,EAAMxB,e,EAOZ4B,WAAa,0BAAAC,EAAAC,OAAA,kEAAAD,EAAA,MAEU,EAAKE,YAFf,OAELR,EAFK,OAGX,EAAKS,SAAS,CACZT,WAJS,sC,EAQbQ,SAAW,WACT,OAAOE,MAAM,mEACVC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKd,UACvBe,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,O,mFAtC5BG,KAAKd,e,+BAyCG,IACAL,EAAWmB,KAAKrB,MAAhBE,OACR,OACE,yBAAKtB,UAAasB,EAAS,MAAQ,gBAChCA,EAASmB,KAAKpB,gBAAkB,e,GArDvBqB,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,kB","file":"static/js/main.f3e62b53.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Movie.css';\r\nimport PropTypes from 'prop-types';\r\nimport LineEllipsis from 'react-lines-ellipsis';\r\n\r\nfunction Movie({title, poster, genres, synopsis}){\r\n  return (\r\n        <div className=\"Movie\">\r\n        <div className=\"Movie__Column\">\r\n          <MoviePoster poster={poster} alt={title}/>\r\n        </div>\r\n        <div className=\"Movie__Column\">\r\n          <h1>{title}</h1>\r\n          <div className=\"Movie__Genres\">\r\n              {genres.map((genre, index) => <MovieGenre genre={genre} key={index} />)}\r\n          </div>\r\n          <p className=\"Movie__Synopsis\">\r\n            <LineEllipsis\r\n              text={synopsis}\r\n              maxLine='3'\r\n              ellipsis= '...'\r\n              tringRight\r\n              basedOn='letters'\r\n            />\r\n            \r\n          </p>\r\n        </div>\r\n        </div>\r\n  )\r\n}\r\n\r\nfunction MoviePoster({poster, alt}){\r\n  return (\r\n    <img src = {poster} alt={alt} title={alt} className=\"Movie__Poster\"/>\r\n  )\r\n  \r\n}\r\n\r\nfunction MovieGenre({genre}){\r\n  return (\r\n    <span className=\"Movie__Genres\">{genre}</span>\r\n  )\r\n  \r\n}\r\n\r\nMovie.prototype = {\r\n  title: PropTypes.string.isRequired,\r\n  poster: PropTypes.string.isRequired,\r\n  genres: PropTypes.array.isRequired,\r\n  synopsis: PropTypes.string.isRequired\r\n}\r\n\r\nMoviePoster.prototype = {\r\n  poster: PropTypes.string.isRequired,\r\n  alt: PropTypes.string.isRequired\r\n}\r\n\r\nMovieGenre.prototype = {\r\n  genre: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Movie;","import React, {\n  Component\n} from 'react';\nimport './App.css';\nimport Movie from './Movie';\n\nclass App extends Component {\n  //Render : ComponentWillMount() => render() => componentDidMount()\n  //Update : componentWillReceiveProps() => shouldComponentUpdate() => componentWillUpdate() -> render() -> compoment\n\n\n  state = {}\n\n  componentDidMount() {\n    this._getMovies();\n  }\n\n  _rendermovies = () => {\n    const movies = this.state.movies.map((movie) => {\n      return <Movie\n      title = {\n        movie.title_english\n      }\n      poster = {\n        movie.medium_cover_image\n      }\n      key = {\n        movie.id\n      }\n      genres = {\n        movie.genres\n      }\n      synopsis = {\n        movie.synopsis\n      }\n      />\n    })\n    return movies\n  }\n  // asynchronous는 이전작업이 끝나야 다음작업 시작하는 형태가 X\n  _getMovies = async () => {\n    //await모드 : callapi가 끝나기를 기다림, return상관없이\n    const movies = await this._callApi();\n    this.setState({\n      movies\n    })\n  }\n\n  _callApi = () => {\n    return fetch('https://yts.lt/api/v2/list_movies.json?quality=3Dsort_by=rating')\n      .then(response => response.json())\n      .then(json => json.data.movies)\n      .catch(err => console.log(err))\n  }\n\n  render() {\n    const { movies } = this.state;\n    return (  \n      <div className = {movies ? \"App\" : \"App--loading\"} >\n        {movies ? this._rendermovies() : 'Loading'} \n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}